SHC4HPCBASE=${SHC4HPCBASE:-/usr/lib/shc4hpc}
test -f /etc/sysconfig/shc4hpc && . /etc/sysconfig/shc4hpc
[ -n $SHC4HPCBASE ] && [ -f  $SHC4HPCBASE/etc/shc4hpc/environment ] && . $SHC4HPCBASE/etc/shc4hpc/environment
[ -n $SHC4HPCBASE ] &&  [ -f  $SHC4HPCBASE/lib/core/functions ] && . $SHC4HPCBASE/lib/core/functions

function usage {
	echo "Deletes a VM with all its associated resouces, except Data disks."
	echo "Usage:"
	echo "	delvm.sh <virtual machine name> [resource group]"
	echo ""
	echo "Arguments"
	echo "	<Virtual machine name>	The name of the Virtual machine to delete."
	echo "	[resource group] 	The name of the resource group to search."
	echo ""
	echo "Example:"
	echo "	delvm.sh myvm01"
	exit
}

# Check to see if we have two arguments at least
if [ -z $1 ]; then 
usage 
fi

#exit on error
set -e 

if ! [ -z $2 ]; then
   RG=$2
else
   RG=$(get_config az_resource_group)
fi

az_login

echo "Gathering information for VM" $1 "in Resource Group" $RG
# Get VM ID
vmID=$(az vm show -n $1 -g $RG --query "id" -o tsv)

# Did we find the VM?
if [[ $vmID = "" ]]; then
	echo Could not find VM $1
	exit
fi


# Get OS Disk
echo "Seeking Disk."
osDisk=$(az vm show -n $1 -g $RG --query "storageProfile.osDisk.name" -o tsv)

dataDisks=$(az vm show -n $1 -g $RG --query "storageProfile.dataDisks[*].name" -o tsv)
# Get a list of public UP addresses
echo "Sniffing IPs.."
ipArray=$(az vm list-ip-addresses -n $1 -g $RG --query "[].virtualMachine.network.publicIpAddresses[].id" -o tsv)

# Get a list of NICs 
echo "Getting NICs.."
nicArray=$(az vm nic list --vm-name $1 -g $RG --query "[].id" -o tsv)

# Get a list of NSGs
nsgQry="[?virtualMachine.id=='"
nsgQry+=$vmID
nsgQry+="'].networkSecurityGroup[].id"
echo "Discovering NSGs.."
nsgArray=$(az network nic list -g $RG --query $nsgQry -o tsv)

echo Deleting VM $1
az vm delete -n $1 -g $RG --yes

echo Deleting Disk ID $osDisk
az disk delete -n $osDisk -g $RG --yes
if [ "$dataDisks"x != x ]; then
   for disk in $dataDisks
   do
          az disk delete -n $disk -g $RG --yes
   done
fi
echo Deleting Network cards $nicArray
az network nic delete --ids $nicArray

#May not have a public IP, so dont exit if fail here

set +e
echo Deleting diagnostic public IPs is disabled $ipArray
echo to do this manually 
echo az network public-ip delete --ids $ipArray
set -e

echo Deleting NSG $nsgArray
az network nsg delete --ids $nsgArray

echo $(date) Done with $1.
